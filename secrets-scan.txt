./schema.sql:    id SERIAL PRIMARY KEY,
./schema.sql:    api_key VARCHAR(64) UNIQUE,
./schema.sql:    id SERIAL PRIMARY KEY,
./schema.sql:    api_key VARCHAR(64) UNIQUE,
./schema.sql:    id SERIAL PRIMARY KEY,
./schema.sql:    id SERIAL PRIMARY KEY,
./schema.sql:    id SERIAL PRIMARY KEY,
./schema.sql:    id SERIAL PRIMARY KEY,
./schema.sql:    id SERIAL PRIMARY KEY,
./schema.sql:    id SERIAL PRIMARY KEY,
./schema.sql:    id SERIAL PRIMARY KEY,
./schema.sql:    id SERIAL PRIMARY KEY,
./schema.sql:    id SERIAL PRIMARY KEY,
./schema.sql:    id SERIAL PRIMARY KEY,
./schema.sql:INSERT INTO suppliers (name, stellar_address, email, api_key) VALUES 
./schema.sql.backup:    id SERIAL PRIMARY KEY,
./schema.sql.backup:    master_api_key VARCHAR(64) UNIQUE, -- Single key for all roles
./schema.sql.backup:    id SERIAL PRIMARY KEY,
./schema.sql.backup:    id SERIAL PRIMARY KEY,
./schema.sql.backup:    id SERIAL PRIMARY KEY,
./schema.sql.backup:    id SERIAL PRIMARY KEY,
./schema.sql.backup:    id SERIAL PRIMARY KEY,
./schema.sql.backup:    id SERIAL PRIMARY KEY,
./schema.sql.backup:    id SERIAL PRIMARY KEY,
./schema.sql.backup:    id SERIAL PRIMARY KEY,
./schema.sql.backup:    id SERIAL PRIMARY KEY,
./schema.sql.backup:    id SERIAL PRIMARY KEY,
./schema.sql.backup:ALTER TABLE reviewers ADD COLUMN IF NOT EXISTS api_key VARCHAR(64);
./schema.sql.backup:INSERT INTO suppliers (name, stellar_address, email, api_key) VALUES 
./schema.sql.backup:    id SERIAL PRIMARY KEY,
./schema.sql.backup:    id SERIAL PRIMARY KEY,
./schema.sql.backup:    api_key VARCHAR(64) UNIQUE,
./schema.sql.backup:    id SERIAL PRIMARY KEY,
./schema.sql.backup:    api_key VARCHAR(64) UNIQUE,
./schema.sql.backup:    id SERIAL PRIMARY KEY,
./public/profile.html:                        <label class="form-label" for="login-key">API Key / Token</label>
./public/profile.html:                            type="password" 
./public/profile.html:                            id="login-key" 
./public/profile.html:                            placeholder="Enter your API key (sup_... or rev_...)"
./public/profile.html:                            Enter your supplier API key (sup_...) or reviewer key (rev_...)
./public/profile.html:            const apiKey = document.getElementById('login-key').value.trim();
./public/profile.html:            if (!apiKey) {
./public/profile.html:                showMessage('Please enter your API key', 'error');
./public/profile.html:                            headers: { 'X-API-Key': apiKey }
./public/profile.html:                        apiKey: apiKey,
./public/profile.html:                    showMessage('Invalid API key. Please check your credentials.', 'error');
./public/profile.html:                    headers: { 'X-API-Key': currentUser.apiKey }
./public/profile.html:            document.getElementById('login-key').value = '';
./public/catalog.html:                        <h3 class="step-title">1. Get an API Token</h3>
./public/catalog.html:                            <pre>curl -H "Authorization: Bearer YOUR_TOKEN" \
./public/catalog.html:                  `1. Mint token: POST /mint\n` +
./public/catalog.html:                  `3. Use Authorization: Bearer YOUR_TOKEN header\n\n` +
./public/catalog.html:        document.getElementById('search').addEventListener('keyup', (e) => {
./public/catalog.html:            if (e.key === 'Enter') {
./public/demo.html:        <p>Click these buttons to register demo accounts and get real API keys:</p>
./public/demo.html:        <p>Once you have API keys, test them:</p>
./public/demo.html:        <label for="api-key-input">Enter your API key:</label>
./public/demo.html:        <input type="password" id="api-key-input" placeholder="sup_... or rev_..." style="width: 300px; padding: 0.5rem; margin: 0.5rem;">
./public/demo.html:        <button class="demo-btn" onclick="testApiKey()">Test API Key</button>
./public/demo.html:        <button class="demo-btn" onclick="testDemoKeys()">Test Demo Database Keys</button>
./public/demo.html:                        `✅ Supplier Account Created!\n\nAPI Key: ${result.api_key}\n\n⚠️  SAVE THIS KEY! You won't see it again.`, 
./public/demo.html:                        `✅ Reviewer Account Created!\n\nAPI Key: ${result.api_key}\n\n⚠️  SAVE THIS KEY! You won't see it again.`, 
./public/demo.html:        async function testApiKey() {
./public/demo.html:            const apiKey = document.getElementById('api-key-input').value.trim();
./public/demo.html:            if (!apiKey) {
./public/demo.html:                showResult('auth-results', '❌ Please enter an API key', 'error');
./public/demo.html:                if (apiKey.startsWith('sup_')) {
./public/demo.html:                } else if (apiKey.startsWith('rev_')) {
./public/demo.html:                    showResult('auth-results', '❌ Invalid API key format. Should start with sup_ or rev_', 'error');
./public/demo.html:                    headers: { 'X-API-Key': apiKey }
./public/demo.html:        async function testDemoKeys() {
./public/demo.html:            const demoKeys = [
./public/demo.html:                { key: 'sup_demo_12345', type: 'supplier' },
./public/demo.html:                { key: 'sup_crypto_67890', type: 'supplier' }
./public/demo.html:            for (const demo of demoKeys) {
./public/demo.html:                        headers: { 'X-API-Key': demo.key }
./public/demo.html:                            `✅ Demo ${demo.type} key works: ${demo.key}\n${JSON.stringify(data, null, 2)}`, 
./public/demo.html:                        showResult('test-results', `❌ Demo key failed: ${demo.key}`, 'error');
./public/demo.html:                    showResult('test-results', `❌ Error testing ${demo.key}: ${error.message}`, 'error');
./app.py:import hashlib, re, asyncio, logging, secrets, statistics
./app.py:from stellar_sdk import Keypair, Network, Server, TransactionBuilder, Asset
./app.py:SECRET = os.getenv("SQUIDPRO_SECRET", "supersecret_change_me")
./app.py:DATABASE_URL = os.getenv("DATABASE_URL", "postgresql://squidpro:password@postgres:5432/squidpro")
./app.py:STELLAR_SECRET_KEY = os.getenv("STELLAR_SECRET_KEY", "SAMPLEKEY123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890AB")
./app.py:    stellar_keypair = Keypair.from_secret(STELLAR_SECRET_KEY)
./app.py:    logging.info(f"Stellar initialized - Public Key: {stellar_keypair.public_key}")
./app.py:    stellar_keypair = None
./app.py:    PASSWORD = "password"
./app.py:    PIIType.PASSWORD: {
./app.py:        'pattern': r'\b(?:pass|password|pwd)[:=]\s*([^\s,;|]+)\b',
./app.py:        'description': 'Passwords',
./app.py:        # Generate API key
./app.py:        api_key = f"rev_{secrets.token_urlsafe(16)}"
./app.py:            INSERT INTO reviewers (name, stellar_address, email, specializations, api_key)
./app.py:        reviewer.specializations, api_key)
./app.py:            "api_key": api_key,
./app.py:            "message": "Reviewer registered successfully. Save your API key securely."
./app.py:async def authenticate_reviewer(api_key: str):
./app.py:    """Authenticate reviewer by API key"""
./app.py:    if not api_key or not api_key.startswith('rev_'):
./app.py:        raise HTTPException(status_code=401, detail="Invalid reviewer API key")
./app.py:            WHERE r.api_key = $1
./app.py:        """, api_key)
./app.py:            raise HTTPException(status_code=401, detail="Invalid reviewer API key")
./app.py:async def get_reviewer_info(x_api_key: Optional[str] = Header(None)):
./app.py:    reviewer = await authenticate_reviewer(x_api_key)
./app.py:    x_api_key: Optional[str] = Header(None)
./app.py:    reviewer = await authenticate_reviewer(x_api_key)
./app.py:    x_api_key: Optional[str] = Header(None)
./app.py:    reviewer = await authenticate_reviewer(x_api_key)
./app.py:    token = jwt.encode({
./app.py:    }, SECRET, algorithm="HS256")
./app.py:    return {"token": token, "trace_id": trace_id, "expires_in_s": 3600, "demo_credits": req.credits}
./app.py:        raise HTTPException(status_code=401, detail="Missing Bearer token")
./app.py:    token = auth_header.split(" ", 1)[1]
./app.py:        claims = jwt.decode(token, SECRET, algorithms=["HS256"])
./app.py:        raise HTTPException(status_code=401, detail=f"Invalid token: {e}")
./app.py:        # Generate API key
./app.py:        api_key = f"sup_{secrets.token_urlsafe(16)}"
./app.py:            INSERT INTO suppliers (name, email, stellar_address, api_key)
./app.py:        """, supplier.name, supplier.email, supplier.stellar_address, api_key)
./app.py:            "api_key": api_key,
./app.py:            "message": "Supplier registered successfully. Save your API key securely."
./app.py:async def authenticate_supplier(api_key: str):
./app.py:    """Authenticate supplier by API key"""
./app.py:    if not api_key or not api_key.startswith('sup_'):
./app.py:        raise HTTPException(status_code=401, detail="Invalid supplier API key")
./app.py:            SELECT id, name, status FROM suppliers WHERE api_key = $1 AND status = 'active'
./app.py:        """, api_key)
./app.py:    x_api_key: Optional[str] = Header(None)
./app.py:    supplier = await authenticate_supplier(x_api_key)
./app.py:                    "pii_types_found": list(analysis['findings_by_type'].keys()),
./app.py:async def get_supplier_info(x_api_key: Optional[str] = Header(None)):
./app.py:    supplier = await authenticate_supplier(x_api_key)
./app.py:async def create_package(package: DataPackage, x_api_key: Optional[str] = Header(None)):
./app.py:    supplier = await authenticate_supplier(x_api_key)
./app.py:    if not stellar_keypair:
./app.py:        source_account = stellar_server.load_account(stellar_keypair.public_key)
./app.py:        transaction.sign(stellar_keypair)
./app.py:    if not stellar_keypair:
./app.py:    if not stellar_keypair:
./app.py:        "public_key": stellar_keypair.public_key,
./app.py:async def get_detailed_profile(x_api_key: Optional[str] = Header(None)):
./app.py:    if not x_api_key:
./app.py:        raise HTTPException(status_code=401, detail="API key required")
./app.py:        if x_api_key.startswith('rev_'):
./app.py:                WHERE r.api_key = $1
./app.py:            """, x_api_key)
./app.py:                raise HTTPException(status_code=401, detail="Invalid API key")
./app.py:        elif x_api_key.startswith('sup_'):
./app.py:                WHERE s.api_key = $1 AND s.status = 'active'
./app.py:            """, x_api_key)
./app.py:                raise HTTPException(status_code=401, detail="Invalid API key")
./app.py:        raise HTTPException(status_code=401, detail="Invalid API key")
./app.py:async def get_payout_history(x_api_key: Optional[str] = Header(None)):
./app.py:    if not x_api_key:
./app.py:        raise HTTPException(status_code=401, detail="API key required")
./app.py:        if x_api_key.startswith('rev_'):
./app.py:            reviewer = await conn.fetchval("SELECT id FROM reviewers WHERE api_key = $1", x_api_key)
./app.py:        elif x_api_key.startswith('sup_'):
./app.py:            supplier = await conn.fetchval("SELECT id FROM suppliers WHERE api_key = $1", x_api_key)
./app.py:            raise HTTPException(status_code=401, detail="Invalid API key")
./app.py:    x_api_key: Optional[str] = Header(None)
./app.py:    if not x_api_key:
./app.py:        raise HTTPException(status_code=401, detail="API key required")
./app.py:        if x_api_key.startswith('rev_'):
./app.py:            reviewer = await conn.fetchval("SELECT id FROM reviewers WHERE api_key = $1", x_api_key)
./app.py:        elif x_api_key.startswith('sup_'):
./app.py:            supplier = await conn.fetchval("SELECT id FROM suppliers WHERE api_key = $1", x_api_key)
./app.py:            raise HTTPException(status_code=401, detail="Invalid API key")
./app.py:async def get_api_usage_stats(x_api_key: Optional[str] = Header(None)):
./app.py:    if not x_api_key:
./app.py:        raise HTTPException(status_code=401, detail="API key required")
./app.py:async def get_unified_profile(x_api_key: Optional[str] = Header(None)):
./app.py:    if not x_api_key:
./app.py:        raise HTTPException(status_code=401, detail="API key required")
./app.py:        if x_api_key.startswith('rev_'):
./app.py:                WHERE r.api_key = $1
./app.py:            """, x_api_key)
./app.py:        elif x_api_key.startswith('sup_'):
./app.py:                WHERE s.api_key = $1 AND s.status = 'active'
./app.py:            """, x_api_key)
./app.py:        raise HTTPException(status_code=401, detail="Invalid API key")
./app.py:    x_api_key: Optional[str] = Header(None)
./app.py:    supplier = await authenticate_supplier(x_api_key)
./app.py:    x_api_key: Optional[str] = Header(None)
./app.py:    supplier = await authenticate_supplier(x_api_key)
./app.py:async def list_uploads(x_api_key: Optional[str] = Header(None)):
./app.py:    supplier = await authenticate_supplier(x_api_key)
./data-catalog.html:        @keyframes pulse {
./data-catalog.html:                    <h3 style="color: #1f2937; margin-bottom: 0.5rem;">1. Get an API Token</h3>
./data-catalog.html:                        <pre>curl -H "Authorization: Bearer YOUR_TOKEN" \
./data-catalog.html:                  `1. Mint token: POST /mint\n` +
./data-catalog.html:                  `3. Use Authorization: Bearer YOUR_TOKEN header\n\n` +
./data-catalog.html:        document.getElementById('search').addEventListener('keyup', (e) => {
./data-catalog.html:            if (e.key === 'Enter') {
